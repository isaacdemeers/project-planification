# services:
#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"
#     volumes:
#       - .:/app # Monte le dossier actuel dans le conteneur
#       - /app/node_modules # Évite les conflits avec node_modules de l'hôte
#     environment:
#       NODE_ENV: development
#       POSTGRES_HOST: db
#       POSTGRES_USER: isaac
#       POSTGRES_PASSWORD: isaac
#       POSTGRES_DB: db
#     networks:
#       - app-network
#     depends_on:
#       db:
#         condition: service_healthy

#   db:
#     image: postgres:17
#     environment:
#       POSTGRES_USER: isaac
#       POSTGRES_PASSWORD: isaac
#       POSTGRES_DB: db
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U isaac"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 30s

#   pgadmin:
#     image: dpage/pgadmin4
#     environment:
#       PGADMIN_DEFAULT_EMAIL: admin@admin.com
#       PGADMIN_DEFAULT_PASSWORD: admin
#     ports:
#       - "5050:80"
#     networks:
#       - app-network
#     depends_on:
#       db:
#         condition: service_healthy

# volumes:
#   postgres-data:

# services:
#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"
#     volumes:
#       - .:/app
#       - /app/node_modules
#     environment:
#       NODE_ENV: development
#       POSTGRES_HOST: db
#       POSTGRES_USER: isaac
#       POSTGRES_PASSWORD: isaac
#       POSTGRES_DB: db
#     networks:
#       - app-network
#     depends_on:
#       db:
#         condition: service_healthy

#   db:
#     image: postgres:17
#     environment:
#       POSTGRES_USER: isaac
#       POSTGRES_PASSWORD: isaac
#       POSTGRES_DB: db
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     networks:
#       - app-network
#     healthcheck:
#       test: [ "CMD-SHELL", "pg_isready -U isaac" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 30s

# networks:
#   app-network:
#     driver: bridge

# volumes:
#   postgres-data:
#     driver: local

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - .:/app # Monte le dossier actuel dans le conteneur
      - /app/node_modules # Évite les conflits avec node_modules de l'hôte
    environment:
      NODE_ENV: development

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: base
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db

volumes:
  db-data:


networks:
  default:
    driver: bridge
